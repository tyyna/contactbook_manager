package fi.muni.cz.guiapp;

import fi.muni.cz.contacts.Address;
import fi.muni.cz.contacts.AddressBuilder;
import fi.muni.cz.contacts.ContactInformation;
import fi.muni.cz.contacts.Email;
import fi.muni.cz.contacts.EmailImpl;
import fi.muni.cz.contacts.InvalidFieldException;
import fi.muni.cz.contacts.Person;
import fi.muni.cz.contacts.PersonBuilder;
import fi.muni.cz.contacts.Phone;
import fi.muni.cz.contacts.PhoneBuilder;
import java.awt.Dialog;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.Collection;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 * Window Form for accessing/editing contact information of selected person.
 *
 * @author vbendel
 */
public class ContactInfoWindowForm extends javax.swing.JFrame {

    private ContactInformation contactInformation;

    private Person originalPerson;
    private boolean personChanged = false;

    private Address originalAddress;
    private boolean addressChanged = false;
    
    private Collection<Email> emailCache;
    private Collection<Phone> phoneCache;

    private final ContactInfoWindowForm THIS_FRAME = this;
    private ContactsWindowForm PARENT;

    private Action quit = new QuitAction();

    private Logger logger = Logger.getLogger("ContactInfoLogger");

    private ResourceBundle bundle = ResourceBundle.getBundle("fi/muni/cz/guiapp/Texts");

    /**
     * Creates new form ContactInfoWindowForm
     */
    public ContactInfoWindowForm() {
        initComponents();
    }

    public ContactInfoWindowForm(ContactInformation contactInformation, ContactsWindowForm parent) {
        this.contactInformation = contactInformation;
        PARENT = parent;
        try {
            this.originalPerson = contactInformation.getPerson();
            this.originalAddress = contactInformation.getAddress();
            emailCache = contactInformation.getEmails();
            phoneCache = contactInformation.getPhones();
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(PARENT,
                    bundle.getString("sql.error"),
                    "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        if (originalAddress == null) {
            originalAddress = new AddressBuilder()
                    .street("")
                    .city("")
                    .number("")
                    .build();
        }

        logger.log(Level.INFO, "Starting ContactInformationWindow initialization for preson_id: "
                + originalPerson.getID().toString());
        initComponents();
        logger.log(Level.INFO, "Finished ContactInformationWindow initialization for preson_id: "
                + originalPerson.getID().toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        addEmailDialog = new javax.swing.JDialog();
        jTextFieldEmailDialog = new javax.swing.JTextField();
        jButtonCloseEmailDialog = new javax.swing.JButton();
        jButtonAddEmailDialog = new javax.swing.JButton();
        addPhoneDialog = new javax.swing.JDialog();
        jTextFieldPhoneDialog = new javax.swing.JTextField();
        jButtonAddPhoneDialog = new javax.swing.JButton();
        jButtonClosePhoneDialog = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableEmails = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePhones = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldPersonName = new javax.swing.JTextField();
        jTextFieldPersonSurname = new javax.swing.JTextField();
        jTextFieldStreet = new javax.swing.JTextField();
        jTextFieldStreetNumber = new javax.swing.JTextField();
        jTextFieldCity = new javax.swing.JTextField();
        jButtonDone = new javax.swing.JButton();
        jButtonCloseWindow = new javax.swing.JButton();
        jButtonAddPhone = new javax.swing.JButton();
        jButtonAddEmail = new javax.swing.JButton();
        jButtonRemoveEmail = new javax.swing.JButton();
        jButtonRemovePhone = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemAddEmail = new javax.swing.JMenuItem();
        jMenuItemRemoveEmail = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemAddPhone = new javax.swing.JMenuItem();
        jMenuItemRemovePhone = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("fi/muni/cz/guiapp/Texts"); // NOI18N
        addEmailDialog.setTitle(bundle.getString("add.email")); // NOI18N

        jButtonCloseEmailDialog.setText(bundle.getString("close")); // NOI18N
        jButtonCloseEmailDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseEmailDialogActionPerformed(evt);
            }
        });

        jButtonAddEmailDialog.setText(bundle.getString("add")); // NOI18N
        jButtonAddEmailDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEmailDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addEmailDialogLayout = new javax.swing.GroupLayout(addEmailDialog.getContentPane());
        addEmailDialog.getContentPane().setLayout(addEmailDialogLayout);
        addEmailDialogLayout.setHorizontalGroup(
            addEmailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEmailDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldEmailDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAddEmailDialog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCloseEmailDialog))
        );
        addEmailDialogLayout.setVerticalGroup(
            addEmailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEmailDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addEmailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCloseEmailDialog)
                    .addComponent(jTextFieldEmailDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddEmailDialog))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addPhoneDialog.setTitle(bundle.getString("add.phone")); // NOI18N

        jButtonAddPhoneDialog.setText(bundle.getString("add")); // NOI18N
        jButtonAddPhoneDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPhoneDialogActionPerformed(evt);
            }
        });

        jButtonClosePhoneDialog.setText(bundle.getString("close")); // NOI18N
        jButtonClosePhoneDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClosePhoneDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPhoneDialogLayout = new javax.swing.GroupLayout(addPhoneDialog.getContentPane());
        addPhoneDialog.getContentPane().setLayout(addPhoneDialogLayout);
        addPhoneDialogLayout.setHorizontalGroup(
            addPhoneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPhoneDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldPhoneDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAddPhoneDialog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClosePhoneDialog))
        );
        addPhoneDialogLayout.setVerticalGroup(
            addPhoneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPhoneDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPhoneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPhoneDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPhoneDialog)
                    .addComponent(jButtonClosePhoneDialog))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("contact.information")); // NOI18N

        jLabel1.setLabelFor(this);
        jLabel1.setText(bundle.getString("contact.information")); // NOI18N

        jTableEmails.setModel(new EmailsTableModel(emailCache));
        jScrollPane3.setViewportView(jTableEmails);

        jLabel4.setText(bundle.getString("emails")); // NOI18N

        jTablePhones.setModel(new PhonesTableModel(phoneCache));
        jScrollPane4.setViewportView(jTablePhones);

        jLabel5.setText(bundle.getString("phones")); // NOI18N

        jLabel8.setText(bundle.getString("name")); // NOI18N

        jLabel2.setText(bundle.getString("surname")); // NOI18N

        jLabel6.setText(bundle.getString("street")); // NOI18N

        jLabel7.setText(bundle.getString("st.number")); // NOI18N

        jLabel9.setText(bundle.getString("city")); // NOI18N

        jTextFieldPersonName.setText(originalPerson.getName());

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${person.name}"), jTextFieldPersonName, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldPersonName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPersonNameActionPerformed(evt);
            }
        });

        jTextFieldPersonSurname.setText(originalPerson.getSurname());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${person.surname}"), jTextFieldPersonSurname, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldStreet.setText(originalAddress.getStreet());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${address.street}"), jTextFieldStreet, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldStreet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStreetActionPerformed(evt);
            }
        });

        jTextFieldStreetNumber.setText(originalAddress.getNumber());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${address.number}"), jTextFieldStreetNumber, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldCity.setText(originalAddress.getCity());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${address.city}"), jTextFieldCity, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCityActionPerformed(evt);
            }
        });

        jButtonDone.setAction(new DoneAction());
        jButtonDone.setText(bundle.getString("done")); // NOI18N
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        jButtonCloseWindow.setAction(quit);
        jButtonCloseWindow.setText(bundle.getString("close")); // NOI18N
        jButtonCloseWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseWindowActionPerformed(evt);
            }
        });

        jButtonAddPhone.setAction(new AddPhoneAction());
        jButtonAddPhone.setText(bundle.getString("add")); // NOI18N
        jButtonAddPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPhoneActionPerformed(evt);
            }
        });

        jButtonAddEmail.setAction(new AddEmailAction()
        );
        jButtonAddEmail.setText(bundle.getString("add")); // NOI18N
        jButtonAddEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEmailActionPerformed(evt);
            }
        });

        jButtonRemoveEmail.setAction(new RemoveEmailAction());
        jButtonRemoveEmail.setText(bundle.getString("remove")); // NOI18N
        jButtonRemoveEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveEmailActionPerformed(evt);
            }
        });

        jButtonRemovePhone.setAction(new RemovePhoneAction());
        jButtonRemovePhone.setText(bundle.getString("remove")); // NOI18N
        jButtonRemovePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemovePhoneActionPerformed(evt);
            }
        });

        jMenu1.setAction(new DoneAction());
        jMenu1.setText(bundle.getString("file")); // NOI18N

        jMenuItem2.setAction(new DoneAction());
        jMenuItem2.setText(bundle.getString("done")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setAction(quit);
        jMenuItem1.setText(bundle.getString("close")); // NOI18N
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("edit")); // NOI18N

        jMenu4.setAction(new RemoveEmailAction());
        jMenu4.setText(bundle.getString("email")); // NOI18N

        jMenuItemAddEmail.setAction(new AddEmailAction());
        jMenuItemAddEmail.setText(bundle.getString("add")); // NOI18N
        jMenuItemAddEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddEmailActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemAddEmail);

        jMenuItemRemoveEmail.setAction(new RemoveEmailAction());
        jMenuItemRemoveEmail.setText(bundle.getString("remove")); // NOI18N
        jMenuItemRemoveEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveEmailActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRemoveEmail);

        jMenu2.add(jMenu4);

        jMenu3.setText(bundle.getString("phone")); // NOI18N

        jMenuItemAddPhone.setAction(new AddPhoneAction());
        jMenuItemAddPhone.setText(bundle.getString("add")); // NOI18N
        jMenuItemAddPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddPhoneActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAddPhone);

        jMenuItemRemovePhone.setAction(new RemovePhoneAction());
        jMenuItemRemovePhone.setText(bundle.getString("remove")); // NOI18N
        jMenuItemRemovePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemovePhoneActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemRemovePhone);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(114, 114, 114))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldPersonName)
                                            .addComponent(jTextFieldPersonSurname)
                                            .addComponent(jTextFieldStreet)
                                            .addComponent(jTextFieldCity))))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldStreetNumber)
                                .addGap(87, 87, 87))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButtonDone)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonCloseWindow))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButtonAddEmail)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonRemoveEmail)))))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButtonAddPhone)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonRemovePhone)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPersonSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStreetNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAddPhone)
                        .addComponent(jButtonRemovePhone))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAddEmail)
                        .addComponent(jButtonRemoveEmail)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDone)
                    .addComponent(jButtonCloseWindow))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddEmailDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEmailDialogActionPerformed
        // TODO add your handling code here:
        AddEmailWorker worker = new AddEmailWorker();
        worker.execute();
    }//GEN-LAST:event_jButtonAddEmailDialogActionPerformed


    private void jTextFieldStreetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStreetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStreetActionPerformed

    private void jButtonCloseWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseWindowActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_jButtonCloseWindowActionPerformed

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed

    }//GEN-LAST:event_jButtonDoneActionPerformed


    private void jTextFieldPersonNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPersonNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPersonNameActionPerformed

    private void jTextFieldCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCityActionPerformed

    private void jButtonClosePhoneDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClosePhoneDialogActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(() -> {
            jTextFieldPhoneDialog.setText("");
            addPhoneDialog.setVisible(false);
        });
    }//GEN-LAST:event_jButtonClosePhoneDialogActionPerformed

    private void jButtonAddPhoneDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPhoneDialogActionPerformed
        AddPhoneWorker worker = new AddPhoneWorker();
        worker.execute();
    }//GEN-LAST:event_jButtonAddPhoneDialogActionPerformed

    private void jButtonAddEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEmailActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButtonAddEmailActionPerformed

    private void jButtonRemoveEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonRemoveEmailActionPerformed

    private void jButtonRemovePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemovePhoneActionPerformed
        // TODO add your handling code here:                
    }//GEN-LAST:event_jButtonRemovePhoneActionPerformed

    private void jButtonAddPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPhoneActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButtonAddPhoneActionPerformed

    private void jButtonCloseEmailDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseEmailDialogActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(() -> {
            jTextFieldEmailDialog.setText("");
            addEmailDialog.setVisible(false);
        });
    }//GEN-LAST:event_jButtonCloseEmailDialogActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItemAddEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddEmailActionPerformed

    }//GEN-LAST:event_jMenuItemAddEmailActionPerformed

    private void jMenuItemRemoveEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveEmailActionPerformed

    }//GEN-LAST:event_jMenuItemRemoveEmailActionPerformed

    private void jMenuItemAddPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddPhoneActionPerformed

    }//GEN-LAST:event_jMenuItemAddPhoneActionPerformed

    private void jMenuItemRemovePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemovePhoneActionPerformed

    }//GEN-LAST:event_jMenuItemRemovePhoneActionPerformed

    //################## WORKERS ###############################################
    
    private class DoneWorker extends SwingWorker {

        private boolean finished = true;
        
        @Override
        protected Object doInBackground() throws Exception {
            logger.log(Level.INFO, "Completing contact editation");

            if (!checkUpdateFields()) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("fields.empty"));
                finished = false;
                return null;
            }
            if (personChanged) {
                logger.log(Level.INFO, "Person data changed.");
                try {
                    Person updated = new PersonBuilder()
                            .name(jTextFieldPersonName.getText())
                            .surname(jTextFieldPersonSurname.getText())
                            .buildValid();

                    contactInformation.updatePerson(updated);
                    logger.log(Level.INFO, "Person data succesfully updated");
                } catch (SQLException ex) {
                    logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                    JOptionPane.showMessageDialog(THIS_FRAME,
                            bundle.getString("sql.error"),
                            "SQL Error", JOptionPane.ERROR_MESSAGE);
                    finished = false;
                }
  
            }
            if (addressChanged) {
                logger.log(Level.INFO, "Address data changed");
                
                try {
                    Address updated = new AddressBuilder()
                            .street(jTextFieldStreet.getText())
                            .number(jTextFieldStreetNumber.getText())
                            .city(jTextFieldCity.getText())
                            .buildValid();

                    contactInformation.updateAddress(updated);
                    logger.log(Level.INFO, "Address data successfully updated");
                } catch (SQLException ex) {
                    logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                    JOptionPane.showMessageDialog(THIS_FRAME,
                            bundle.getString("sql.error"),
                            "SQL Error", JOptionPane.ERROR_MESSAGE);
                    finished = false;
                }

            }
            return null;
        }        
        
        @Override
        protected void done() {
            if (finished) {
                EventQueue.invokeLater(() -> {
                    PARENT.refreshTable();
                    quit.actionPerformed(null);                    
                });
            }
        }
    }

    private class AddEmailWorker extends SwingWorker {

        private Email email = null;

        @Override
        protected Object doInBackground() throws Exception {
            String rawEmail = jTextFieldEmailDialog.getText();
            if (rawEmail == null || rawEmail.equals("")) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("fields.empty"));
                return null;
            }
            try {
                email = new EmailImpl(rawEmail);

                contactInformation.addEmail(email);

            } catch (InvalidFieldException ex) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("email.invalid"));
                email = null;
            } catch (SQLException ex) {
                logger.log(Level.WARNING, "Email [" + email + "] not added due to SQL error.");
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                email = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (email != null) {
                EventQueue.invokeLater(() -> {
                    EmailsTableModel model = (EmailsTableModel) jTableEmails.getModel();
                    model.addEmail(email);
                    logger.log(Level.INFO, "Email [" + email.toString() + "] successfully added.");
                    jTextFieldEmailDialog.setText("");
                    addEmailDialog.setVisible(false);
                });

            }
        }
    }
    
    private class RemoveEmailWorker extends SwingWorker {

        private Integer selected = null;
        
        @Override
        protected Object doInBackground() throws Exception {
            selected = jTableEmails.getSelectedRow();
            if (selected < 0) {
                selected = null;
                return null;
            }
            logger.log(Level.INFO, "Removing email");
            
            EmailsTableModel model = (EmailsTableModel) jTableEmails.getModel();
            Email removed = model.getEmail(selected);
            try {
                contactInformation.removeEmail(removed);
                logger.log(Level.INFO, "Email removed from database: " + removed.toString());
            } catch (SQLException ex) {
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                selected = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (selected != null) {
                EventQueue.invokeLater(() -> {
                    EmailsTableModel model = (EmailsTableModel) jTableEmails.getModel();
                    model.removeEmail(selected);
                    logger.log(Level.INFO, "Email successfully removed");
                });
            }
        }
    }

    private class AddPhoneWorker extends SwingWorker {

        private Phone phone = null;

        @Override
        protected Object doInBackground() throws Exception {
            String rawPhone = jTextFieldPhoneDialog.getText();
            if (rawPhone == null || rawPhone.equals("")) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("fields.empty"));
                return null;
            }
            try {
                int number = Integer.parseInt(rawPhone);
                phone = new PhoneBuilder().number(number).buildValid();

                contactInformation.addPhone(phone);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("phone.invalid"));

            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("phone.invalid"));
                phone = null;

            } catch (SQLException ex) {
                logger.log(Level.WARNING, "Phone [" + rawPhone + "] not added due to SQL error.");
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                phone = null;
            }

            return null;
        }

        @Override
        protected void done() {
            if (phone != null) {
                EventQueue.invokeLater(() -> {
                    PhonesTableModel table = (PhonesTableModel) jTablePhones.getModel();
                    table.addPhone(phone);
                    logger.log(Level.INFO, "Phone [" + phone.toString() + "] successfully added.");
                    jTextFieldPhoneDialog.setText("");
                    addPhoneDialog.setVisible(false);
                });
            }
        }

    }

    private class RemovePhoneWorker extends SwingWorker {

        private Integer selected = null;
        
        @Override
        protected Object doInBackground() throws Exception {
            logger.log(Level.INFO, "Removing phone");
            selected = jTablePhones.getSelectedRow();
            if (selected < 0) {
                selected = null;
                return null;
            }
            PhonesTableModel model = (PhonesTableModel) jTablePhones.getModel();
            Phone toRemove = model.getPhone(selected);
            try {
                contactInformation.removePhone(toRemove);
                logger.log(Level.INFO, "Removed phone: " + toRemove.toString());
            } catch (SQLException ex) {
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                selected = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (selected != null) {
                EventQueue.invokeLater(() -> {
                    PhonesTableModel model = (PhonesTableModel) jTablePhones.getModel();
                    model.removePhone(selected);
                    logger.log(Level.INFO, "Phone successfully removed");
                });
            }
        }
        
        
    }
    
    //################## CUSTOM ACTIONS + METHODS ##############################
  
    //This method is only used withing a worker thread
    private boolean checkUpdateFields() {
        String name, surname;

        name = jTextFieldPersonName.getText();
        surname = jTextFieldPersonSurname.getText();

        if (name == null || surname == null || name.equals("") || surname.equals("")) {
            return false;
        }

        String street = jTextFieldStreet.getText();
        String city = jTextFieldCity.getText();
        String number = jTextFieldStreetNumber.getText();

        if (street == null || city == null || number == null
                || street.equals("") || city.equals("") || number.equals("")) {
            if (!(street.equals("") && city.equals("") && number.equals(""))) {
                return false;
            }
        }

        personChanged = !(name.equals(originalPerson.getName())
                && surname.equals(originalPerson.getSurname()));
        addressChanged = !(street.equals(originalAddress.getStreet())
                && city.equals(originalAddress.getCity())
                && number.equals(originalAddress.getNumber()));

        return true;
    }

    private class DoneAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ae) {
            DoneWorker worker = new DoneWorker();
            worker.execute();
        }

    }

    private class QuitAction extends AbstractAction {

        public void actionPerformed(ActionEvent e) {
            processWindowEvent(new WindowEvent(THIS_FRAME, WindowEvent.WINDOW_CLOSING));
        }
    }

    private class AddEmailAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ae) {
            EventQueue.invokeLater(() -> {
                addEmailDialog.pack();
                addEmailDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                addEmailDialog.setLocationRelativeTo(THIS_FRAME);
                addEmailDialog.setVisible(true);
            });
        }

    }

    public class RemoveEmailAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ae) {
            RemoveEmailWorker worker = new RemoveEmailWorker();
            worker.execute();
        }

    }

    public class AddPhoneAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ae) {
            EventQueue.invokeLater(() -> {
                addPhoneDialog.pack();
                addPhoneDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                addPhoneDialog.setLocationRelativeTo(THIS_FRAME);
                addPhoneDialog.setVisible(true);
            });
        }

    }

    public class RemovePhoneAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ae) {
            RemovePhoneWorker worker = new RemovePhoneWorker();
            worker.execute();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addEmailDialog;
    private javax.swing.JDialog addPhoneDialog;
    private javax.swing.JButton jButtonAddEmail;
    private javax.swing.JButton jButtonAddEmailDialog;
    private javax.swing.JButton jButtonAddPhone;
    private javax.swing.JButton jButtonAddPhoneDialog;
    private javax.swing.JButton jButtonCloseEmailDialog;
    private javax.swing.JButton jButtonClosePhoneDialog;
    private javax.swing.JButton jButtonCloseWindow;
    private javax.swing.JButton jButtonDone;
    private javax.swing.JButton jButtonRemoveEmail;
    private javax.swing.JButton jButtonRemovePhone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemAddEmail;
    private javax.swing.JMenuItem jMenuItemAddPhone;
    private javax.swing.JMenuItem jMenuItemRemoveEmail;
    private javax.swing.JMenuItem jMenuItemRemovePhone;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableEmails;
    private javax.swing.JTable jTablePhones;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldEmailDialog;
    private javax.swing.JTextField jTextFieldPersonName;
    private javax.swing.JTextField jTextFieldPersonSurname;
    private javax.swing.JTextField jTextFieldPhoneDialog;
    private javax.swing.JTextField jTextFieldStreet;
    private javax.swing.JTextField jTextFieldStreetNumber;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    }
