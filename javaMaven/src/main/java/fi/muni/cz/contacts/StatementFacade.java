package fi.muni.cz.contacts;

import javax.sql.DataSource;
import java.sql.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.apache.derby.jdbc.EmbeddedDataSource;

/**
 * @author Vratislav Bendel
 * @version 3/24/17
 */
public class StatementFacade {
    private DataSource ds;
    private Connection connection;
    private PreparedStatement statement;
    private boolean update;

    public StatementFacade(DataSource ds) throws SQLException {
        this.ds = ds;
        connection = ds.getConnection();
        connection.setAutoCommit(false);
    }

    public StatementFacade(DataSource ds, boolean update) throws SQLException {
        this.ds = ds;
        this.update = update;
        connection = ds.getConnection();
        if (update)
            connection.setAutoCommit(false);
    }

    public void prepareStatement(String statementTemplate) throws SQLException {
        statement = connection.prepareStatement(statementTemplate);
    }

    public void setString(int index, String value) throws SQLException {
        statement.setString(index, value);
    }

    /**
     *
     * @param statement
     * @return ResultSet, HAS TO BE CLOSED AFTERWARDS!!!
     * @throws SQLException
     */
    public ResultSet executeQuery(String statement) throws SQLException {
        return this.statement.executeQuery(statement);
    }

    public ResultSet getResultSet() throws SQLException {
        return statement.getResultSet();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    public int executeUpdate(String statement) throws SQLException {
        return this.statement.executeUpdate(statement);

    }

    public boolean execute(String statement, int autoGeneratedKeys) throws SQLException {
        return this.statement.execute(statement, autoGeneratedKeys);
    }

    public void commit() throws SQLException {
        connection.commit();
    }

    public void close() throws SQLException {

        statement.close();
        connection.setAutoCommit(true); //podla vzorovych zdrojakov

        connection.rollback();

        connection.close();
    }

/*
    public Collection<Object> executeQueryType(String statement, QueryType type) throws SQLException {
        Collection<Object> result;
        try {
            connection = ds.getConnection();
            this.statement = connection.createStatement();
            ResultSet resultSet = this.statement.executeQuery(statement);
            switch (type) {
                case PERSON:
                    result = (Collection<Object>) parsePersonsFromResultSet(resultSet);
            }

            resultSet.close();

        } catch (SQLException e) {
            System.err.print(e.getMessage());
            throw e;
        }
        finally {
            if (statementFacade != null)
                statementFacade.close();
        }
    }

    private Collection<Person> parsePersonsFromResultSet(ResultSet resultSet) throws SQLException {
        List<Person> personList = new LinkedList<>();
        PersonBuilder personBuilder = new PersonBuilder();
        while(resultSet.next()) {
            personList.add(personBuilder
                    .id(resultSet.getInt(1))
                    .name(resultSet.getString(2))
                    .surname(resultSet.getString(3))
                    .buildValid());
        }
        return personList;
    }
*/

}
