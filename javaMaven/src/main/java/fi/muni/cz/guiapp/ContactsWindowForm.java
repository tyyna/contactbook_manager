/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.muni.cz.guiapp;

import fi.muni.cz.contacts.Address;
import fi.muni.cz.contacts.AddressBuilder;
import fi.muni.cz.contacts.ContactInformation;
import fi.muni.cz.contacts.ContactManager;
import fi.muni.cz.contacts.ContactManagerImpl;
import fi.muni.cz.contacts.DBUtils;
import fi.muni.cz.contacts.Email;
import fi.muni.cz.contacts.EmailBuilder;
import fi.muni.cz.contacts.InvalidFieldException;
import fi.muni.cz.contacts.Person;
import fi.muni.cz.contacts.PersonBuilder;
import fi.muni.cz.contacts.Phone;
import fi.muni.cz.contacts.PhoneBuilder;
import java.awt.Dialog;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author teena
 */
public class ContactsWindowForm extends javax.swing.JFrame {

    private ContactManager manager;
    private Collection<Person> originalPeople;
    private Logger logger = Logger.getLogger("ContactsWindowLogger");
    ResourceBundle bundle = java.util.ResourceBundle.getBundle("fi/muni/cz/guiapp/Texts");
    
    private final ContactsWindowForm THIS_FRAME = this;
    private Action quit = new QuitAction();
    
    /**
     * Creates new form ContactsWindowForm
     */
    public ContactsWindowForm() {
        initComponents();
    }
    
    public ContactsWindowForm(ContactManager manager) {
        this.manager = manager;
        try {            
            logger.log(Level.INFO, "Connecting to databse");
            originalPeople = manager.getAllPersons();
            logger.log(Level.INFO, "Initialization of ContactWindowForm");
            initComponents();
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(THIS_FRAME, 
                        bundle.getString("sql.error"), 
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactInfoWindowForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactInfoWindowForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactInfoWindowForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactInfoWindowForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        DataSource ds = DBUtils.prepareEmbeddedDatabaseHome();
        try {            
            DBUtils.executeSqlScript(ds, ContactManager.class.getResource("createTables.sql"));
        
        } catch (SQLException ex) {
            //ignore - tables already created
        }
        
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactsWindowForm(new ContactManagerImpl(ds)).setVisible(true);
            }
        });        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogAddPerson = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldSurname = new javax.swing.JTextField();
        jButtonDialogClose = new javax.swing.JButton();
        jButtonDialogAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableContacts = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonSelect = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemRefresh = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemRemove = new javax.swing.JMenuItem();
        jMenuItemSelect = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("fi/muni/cz/guiapp/Texts"); // NOI18N
        jLabel1.setText(bundle.getString("surname")); // NOI18N

        jLabel2.setText(bundle.getString("name")); // NOI18N

        jButtonDialogClose.setText(bundle.getString("close")); // NOI18N
        jButtonDialogClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogCloseActionPerformed(evt);
            }
        });

        jButtonDialogAdd.setText(bundle.getString("add")); // NOI18N
        jButtonDialogAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogAddPersonLayout = new javax.swing.GroupLayout(jDialogAddPerson.getContentPane());
        jDialogAddPerson.getContentPane().setLayout(jDialogAddPersonLayout);
        jDialogAddPersonLayout.setHorizontalGroup(
            jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAddPersonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogAddPersonLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldName))
                    .addGroup(jDialogAddPersonLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSurname))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogAddPersonLayout.createSequentialGroup()
                        .addGap(0, 292, Short.MAX_VALUE)
                        .addComponent(jButtonDialogAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDialogClose)))
                .addContainerGap())
        );
        jDialogAddPersonLayout.setVerticalGroup(
            jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogAddPersonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogAddPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDialogClose)
                    .addComponent(jButtonDialogAdd))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("contacts")); // NOI18N

        jTableContacts.setModel(new PersonTableModel(originalPeople));
        jScrollPane1.setViewportView(jTableContacts);

        jButtonAdd.setAction(new AddContactAction());
        jButtonAdd.setText(bundle.getString("add")); // NOI18N
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setAction(new RemoveContactAction());
        jButtonRemove.setText(bundle.getString("remove")); // NOI18N
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonSelect.setAction(new SelectContactAction());
        jButtonSelect.setText(bundle.getString("select")); // NOI18N
        jButtonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectActionPerformed(evt);
            }
        });

        jMenuFile.setText(bundle.getString("file")); // NOI18N

        jMenuItemRefresh.setText(bundle.getString("refresh")); // NOI18N
        jMenuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRefreshActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemRefresh);

        jMenuItemClose.setText(bundle.getString("close")); // NOI18N
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemClose);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText(bundle.getString("edit")); // NOI18N

        jMenuItemAdd.setAction(new AddContactAction());
        jMenuItemAdd.setText(bundle.getString("add")); // NOI18N
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemAdd);

        jMenuItemRemove.setAction(new RemoveContactAction());
        jMenuItemRemove.setText(bundle.getString("remove")); // NOI18N
        jMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRemove);

        jMenuItemSelect.setAction(new SelectContactAction());
        jMenuItemSelect.setText(bundle.getString("select")); // NOI18N
        jMenuItemSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemSelect);

        jMenuBar.add(jMenuEdit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonRemove)
                    .addComponent(jButtonSelect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveActionPerformed
        
    }//GEN-LAST:event_jMenuItemRemoveActionPerformed

    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddActionPerformed

    }//GEN-LAST:event_jMenuItemAddActionPerformed

    private void jButtonDialogAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogAddActionPerformed
       AddContactWorker worker = new AddContactWorker();
        worker.execute();
    }//GEN-LAST:event_jButtonDialogAddActionPerformed

    private void jButtonDialogCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogCloseActionPerformed
        logger.log(Level.INFO, "Closing add dialog.");
        EventQueue.invokeLater(() -> {
            jTextFieldName.setText("");
            jTextFieldSurname.setText("");                    
            jDialogAddPerson.setVisible(false);
        });
    }//GEN-LAST:event_jButtonDialogCloseActionPerformed

    private void jMenuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRefreshActionPerformed
        RefreshWorker worker = new RefreshWorker();
        worker.execute();
    }//GEN-LAST:event_jMenuItemRefreshActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        logger.log(Level.INFO, "Closing window.");
        quit.actionPerformed(evt);
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jButtonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectActionPerformed
        
    }//GEN-LAST:event_jButtonSelectActionPerformed
    
    private void jMenuItemSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemSelectActionPerformed

    //##################### WORKERS #####################################
    
    private class AddContactWorker extends SwingWorker {

        private Person person = null;

        @Override
        protected Object doInBackground() throws Exception {
            String name = jTextFieldName.getText();
            String surname = jTextFieldSurname.getText();
            try {
                person = new PersonBuilder().name(name).surname(surname).buildValid();
                if (person == null || name.equals("") || surname.equals("")) {
                    JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("fields.empty"));
                    person = null;
                    return null;
                }
                logger.log(Level.INFO, "Adding contact " + name + " " + surname + ".");
                manager.addPerson(person);
                logger.log(Level.INFO, "Contact added to database.");

            } catch (InvalidFieldException ex) {
                JOptionPane.showMessageDialog(THIS_FRAME, bundle.getString("fields.empty"));
                person = null;
            } catch (SQLException ex) {
                logger.log(Level.WARNING, "Contact [" + name + " " + surname + "] not added due to SQL error.");
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                person = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (person != null) {
                EventQueue.invokeLater(() -> {
                    PersonTableModel model = (PersonTableModel) jTableContacts.getModel();
                    model.addContact(person);
                    logger.log(Level.INFO, "Contact [" + person.getName() + " " + person.getSurname() + "] successfully added.");
                    jTextFieldName.setText("");
                    jTextFieldSurname.setText("");
                    jDialogAddPerson.setVisible(false);
                });
            }
        }
    }
    
    private class RemoveContactWorker extends SwingWorker {

        private Integer selected = null;
        
        @Override
        protected Object doInBackground() throws Exception {
            selected = jTableContacts.getSelectedRow();
            if (selected < 0) {
                selected = null;
                return null;
            }
            logger.log(Level.INFO, "Removing contact");
            
            PersonTableModel model = (PersonTableModel) jTableContacts.getModel();
            Person removed = model.getPerson(selected);
            try {
                manager.removePerson(removed);
                logger.log(Level.INFO, "Contact removed from database: " + removed.toString());
            } catch (SQLException ex) {
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME,
                        bundle.getString("sql.error"),
                        "SQL Error", JOptionPane.ERROR_MESSAGE);
                selected = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (selected != null) {
                EventQueue.invokeLater(() -> {
                    PersonTableModel model = (PersonTableModel) jTableContacts.getModel();
                    model.removeContact(selected);
                    logger.log(Level.INFO, "Contact successfully removed");
                });
            }
        }
    }
    
    private class SelectWorker extends SwingWorker {

        private ContactInformation contactInfo = null; 
        
        @Override
        protected Object doInBackground() throws Exception {
            logger.log(Level.INFO, "Selecting contact");
            int selected = jTableContacts.getSelectedRow();
            if (selected < 0){
                return null;
            }
            try {
                PersonTableModel model = (PersonTableModel) jTableContacts.getModel();
                Integer id = model.getPerson(selected).getID();

                contactInfo = manager.selectPerson(id);

            } catch(SQLException ex) {
                logger.log(Level.WARNING, "Contact was not selected due to SQL error.");
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                contactInfo = null;
                JOptionPane.showMessageDialog(THIS_FRAME, 
                            "SQL Error happened. Please close the application and contact your technical administrator!", 
                            "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
            return null;
        }

        @Override
        protected void done() {
            if (contactInfo != null) {
                EventQueue.invokeLater(() -> {
                    new ContactInfoWindowForm(contactInfo, THIS_FRAME).setVisible(true);
                    logger.log(Level.INFO, "Contact selected.");
                });
            }
        }
        
        
        
    }
    
    private class RefreshWorker extends SwingWorker {

        Collection<Person> persons = null;
        
        @Override
        protected Object doInBackground() throws Exception {
            
            try {
                persons = manager.getAllPersons();
               
            } catch(SQLException ex) {
                logger.log(Level.WARNING, "Contacts table not refreshed due to SQL error.");
                logger.log(Level.SEVERE, "SQL Error: " + ex.getMessage());
                JOptionPane.showMessageDialog(THIS_FRAME, 
                            bundle.getString("sql.error"), 
                            "SQL Error", JOptionPane.ERROR_MESSAGE);
                persons = null;
            }
            return null;
        }

        @Override
        protected void done() {
            if (persons != null) {
                EventQueue.invokeLater(() -> {
                    PersonTableModel table = (PersonTableModel) jTableContacts.getModel();
                    table.setContacts(persons);
                    logger.log(Level.INFO, "Person table refreshed from database");
                });
            }
        }
        
        
    }
    
    //############## ACTIONS ###################################
    
    public void refreshTable() {
        RefreshWorker worker = new RefreshWorker();
        worker.execute();
    }
    
    private class AddContactAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            logger.log(Level.INFO, "Opening add dialog.");
            EventQueue.invokeLater(() -> {
                jDialogAddPerson.pack();
                jDialogAddPerson.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                jDialogAddPerson.setLocationRelativeTo(THIS_FRAME);
                jDialogAddPerson.setVisible(true);
            });
        }        
    }
    
    private class RemoveContactAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            RemoveContactWorker worker = new RemoveContactWorker();
            worker.execute();
        }     
    }
    
    private class SelectContactAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            SelectWorker worker = new SelectWorker();
            worker.execute();
        }
        
    }
    
    private class QuitAction extends AbstractAction {

        public void actionPerformed(ActionEvent e) {
            processWindowEvent(new WindowEvent(THIS_FRAME, WindowEvent.WINDOW_CLOSING));
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDialogAdd;
    private javax.swing.JButton jButtonDialogClose;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JDialog jDialogAddPerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemRefresh;
    private javax.swing.JMenuItem jMenuItemRemove;
    private javax.swing.JMenuItem jMenuItemSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableContacts;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldSurname;
    // End of variables declaration//GEN-END:variables


}
